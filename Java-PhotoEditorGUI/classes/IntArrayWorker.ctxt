#BlueJ class context
comment0.target=IntArrayWorker
comment1.params=theMatrix
comment1.target=void\ setMatrix(int[][])
comment1.text=\ set\ the\ matrix\ to\ the\ passed\ one\r\n\ @param\ theMatrix\ the\ one\ to\ use\r\n
comment10.params=arr\ stair
comment10.target=void\ stairSort(int[],\ int)
comment10.text=\r\n\ my\ idea\ for\ one\:\ scan\ an\ array,\ find\ min\ and\ max\ values,\ break\ array\ into\ a\ given\ number\ of\ chunks\ (number\ \=\=\ stair),\ \r\n\ then\ go\ through\ the\ array\ putting\ numbers\ into\ the\ chunk\ they\ fit\ in,\ then\ sort\ the\ chunks\r\n
comment11.params=arr
comment11.target=void\ heapSort(int[])
comment11.text=\r\n\ heap\ sort\r\n
comment12.params=arr\ n\ i
comment12.target=void\ heapify(int[],\ int,\ int)
comment13.params=arr
comment13.target=void\ countSort(int[])
comment13.text=\r\n\ count\ sort\r\n
comment14.params=arr
comment14.target=void\ quickSort(int[])
comment14.text=\r\n\ quick\ sort\r\n
comment15.params=arr\ low\ high
comment15.target=void\ qSort(int[],\ int,\ int)
comment15.text=\ The\ main\ function\ that\ implements\ QuickSort()\ \r\n\ \ \ \ arr[]\ -->\ Array\ to\ be\ sorted,\ \r\n\ \ \ \ low\ -->\ Starting\ index,\ \r\nhigh\ -->\ Ending\ index
comment16.params=arr\ low\ high
comment16.target=int\ partition(int[],\ int,\ int)
comment16.text=\ This\ function\ takes\ last\ element\ as\ pivot,\ \r\n\ \ \ \ places\ the\ pivot\ element\ at\ its\ correct\ \r\n\ \ \ \ position\ in\ sorted\ array,\ and\ places\ all\ \r\n\ \ \ \ smaller\ (smaller\ than\ pivot)\ to\ left\ of\ \r\n\ \ \ \ pivot\ and\ all\ greater\ elements\ to\ right\ \r\nof\ pivot
comment2.params=
comment2.target=int\ getTotal()
comment2.text=\r\n\ Method\ to\ return\ the\ total\ \r\n\ @return\ the\ total\ of\ the\ values\ in\ the\ array\r\n
comment3.params=
comment3.target=int\ getTotalNested()
comment3.text=\r\n\ Method\ to\ return\ the\ total\ using\ a\ nested\ for-each\ loop\r\n\ @return\ the\ total\ of\ the\ values\ in\ the\ array\r\n
comment4.params=
comment4.target=void\ fillCount()
comment4.text=\r\n\ Method\ to\ fill\ with\ an\ increasing\ count\r\n
comment5.params=
comment5.target=void\ print()
comment5.text=\r\n\ print\ the\ values\ in\ the\ array\ in\ rows\ and\ columns\r\n
comment6.params=
comment6.target=void\ fillPattern1()
comment6.text=\ \r\n\ fill\ the\ array\ with\ a\ pattern\r\n
comment7.params=x
comment7.target=int\ getCount(int)
comment7.text=\r\n\ returns\ the\ count\ of\ the\r\n\ number\ of\ times\ a\ passed\ integer\ value\ is\ found\ in\ the\ matrix.\r\n\ \r\n\ @param\ x\ the\ integer\ it's\ looking\ for\r\n\ @return\ count\ the\ count\r\n
comment8.params=
comment8.target=int\ getLargest()
comment8.text=\r\n\ returns\ the\ largest\ value\ in\ the\ matix\r\n\ \r\n\ @return\ largest\ the\ largest\ value\ in\ the\ matrix\r\n
comment9.params=col
comment9.target=int\ getColTotal(int)
comment9.text=\r\n\ \ returns\ the\ total\ of\ all\ integers\ in\ a\ specified\ column.\r\n\ \ \r\n\ \ @param\ col\ the\ column\ to\ total\r\n\ \ @return\ colTotal\ the\ total\ of\ the\ column\r\n
numComments=17
